import cv2
from djitellopy import tello
from datetime import datetime
from threading import Thread
def record_tello_video_stream(frame_read: tello.BackgroundFrameRead, out: cv2.VideoWriter):
    try:
        while True:
            # Capture a frame from the Tello video stream
            frame = frame_read.frame

            # Write the captured frame to the output video file
            out.write(frame)

            # Display the captured frame in a window
            cv2.imshow("Frame", frame)

            # Check for the 'q' key press to exit the loop and stop recording
            if cv2.waitKey(30) & 0xFF == ord('q'):  # Change 33 to 1 for 30fps
                break
    except Exception as e:
        print('An exception occurred in recording tellos video stream')
    finally:
        # Close the window and release the video writer
        cv2.destroyAllWindows()
        out.release()
def move_drone():
    # initiate drone movement
    drone = tello.Tello()
    drone.takeoff()
    #count for preventing moving up while repeating
    count=1
    while True:
        # movement commands drone.x
        if count==1:
            drone.move_up(50)
            count+=1
        drone.move_forward(304)
        drone.rotate_clockwise(90)
        drone.move_forward(152)
        drone.rotate_clockwise(90)
        drone.move_forward(304)
        drone.rotate_clockwise(90)
        drone.move_forward(152)
        drone.rotate_clockwise(90)
def main():
    # Create timestamp for unique video filename
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    # Initialize Tello drone and establish connection
    drone = tello.Tello()
    drone.connect()
    drone.streamon()
    # Get frame reader and video dimensions
    frame_read = drone.get_frame_read()
    h, w, _ = frame_read.frame.shape
    # Set up video writer
    out = cv2.VideoWriter(f'{timestamp}_tello_recording.mp4', cv2.VideoWriter.fourcc(*'mp4v'), 30, (w, h))
    # Start recording in separate thread
    recorder = Thread(target=record_tello_video_stream, args=(frame_read, out))
    recorder.start()
    # Start drone movement in main thread
    move_drone()
    # Wait for recording thread to finish
    recorder.join()
    # End message and reboot
    print('End of main, calling drone.reboot')
    drone.reboot()
if __name__ == "__main__":
    main()
